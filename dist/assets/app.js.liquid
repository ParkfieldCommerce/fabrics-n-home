/*==============================================================================
Feel free to add your own header, but please keep the following:
 ___  _   _    _
/   || | | |  | |
\__  | | | |  | |  __
/    |/  |/_) |/  /  \_/\/
\___/|__/| \_/|__/\__/  /\_/
              |\
              |/
Concrete v2.0.1
https://github.com/Elkfox/Concrete
Copyright (c) 2017 Elkfox Co Pty Ltd
https://elkfox.com
MIT License
==============================================================================*/

window.concrete = window.concrete || {};

// perhaps turn into an assign in function?
concrete.strings = {
  soldOut: "{{ 'product.sold_out' | t }}",
  addToCart: "{{ 'product.add_to_cart' | t }}",
  unavailable: "{{ 'product.unavailable' | t }}"
};

concrete.urlParams = {};

/*================ Concrete ================*/
// =require concrete/cache.js
// replace urlparameter
concrete.replaceUrlParam = function(url, paramName, paramValue){
    if(paramValue == null)
        paramValue = '';
    var pattern = new RegExp('\\b('+paramName+'=).*?(&|$)')
    if(url.search(pattern)>=0){
        return url.replace(pattern,'$1' + paramValue + '$2');
    }
    return url + (url.indexOf('?')>0 ? '&' : '?') + paramName + '=' + paramValue
}

concrete.getUrlParameters = function(){
  parameters = {};
  if (location.search.length) {
    for (var value, i = 0, pairs = location.search.substr(1).split('&'); i < pairs.length; i++) {
      value = pairs[i].split('=');
      if (value.length > 1) {
        parameters[decodeURIComponent(value[0])] = decodeURIComponent(value[1]);
      }
    }
  }
  return parameters;
}

concrete.pushNewUrl = function(url) {
  window.history.replaceState({path: url}, '', url);
}

// Collection template sorting
concrete.getUrlParameterByName = function(parameter) {
  var url = decodeURIComponent(window.location.search.substring(1)),
      urlVariables = url.split('&'),
      parameterName;

  for (i = 0; i < urlVariables.length; i++) {
    parameterName = urlVariables[i].split('=');
    if (parameterName[0] === parameter) {
      return parameterName[1] === undefined ? true : parameterName[1];
    }
  }
};

concrete.urlParams = concrete.getUrlParameters();

// Javascript helpers for users with visual impairment

concrete.a11y = {

  // For use after scrolling using an anchor link, focus will change to the correct location so that hitting tab does not scroll the user back up.
  pageLinkFocus: function($element) {

    $element.first()
      .attr('tabIndex', '-1')
      .focus()
      .data('a11y-focus')
      .one('blur', callback);

    function callback() {
      $element.first()
        .removeData('a11y-focus')
        .removeAttr('tabindex');
    }
  },
  // Detect if the user has visited an anchored url if so update the focus to the correct location
  focusHash: function() {
    var hash = window.location.hash;

    // is there a hash in the url? is it an element on the page?
    if (hash && document.getElementById(hash.slice(1))) {
      this.pageLinkFocus($(hash));
    }
  },
  // On click of an anchor link fire the page focus function
  bindInPageLinks: function() {
    $('a[href*=#]').on('click', function(evt) {
      this.pageLinkFocus($(evt.currentTarget.hash));
    }.bind(this));
  },
  // Traps the focus within a specific container for example a popup that is open
  trapFocus: function(options) {
    var eventName = options.namespace
      ? 'focusin.' + options.namespace
      : 'focusin';

    if (!options.$elementToFocus) {
      options.$elementToFocus = options.$container;
    }

    options.$container.attr('tabindex', '-1');
    options.$elementToFocus.focus();

    $(document).on(eventName, function(evt) {
      if (options.$container[0] !== evt.target && !options.$container.has(evt.target).length) {
        options.$container.focus();
      }
    });
  },

  // Stop trapping of focus
  removeTrapFocus: function(options) {
    var eventName = options.namespace
      ? 'focusin.' + options.namespace
      : 'focusin';

    if (options.$container && options.$container.length) {
      options.$container.removeAttr('tabindex');
    }

    $(document).off(eventName);
  }

}

concrete.Currency = (function() {

  var moneyFormat = {% raw %}'${{amount}}'{% endraw %};

  function formatMoney(cents, format) {
    if (typeof cents === 'string') {
      cents = cents.replace('.', '');
    }
    var value = '',
    placeholderRegex = /\{\{\s*(\w+)\s*\}\}/,
    formatString = (format || moneyFormat);
    function formatWithDelimiters(number, precision, thousands, decimal) {
      precision = precision || 2;
      thousands = thousands || ',';
      decimal = decimal || '.';

      if (isNaN(number) || number == null) {
        return 0;
      }

      number = (number/100.0).toFixed(precision);

      var parts = number.split('.'),
      dollars = parts[0].replace(/(\d)(?=(\d\d\d)+(?!\d))/g, '$1' + thousands),
      cents = parts[1] ? (decimal + parts[1]) : '';

      return dollars + cents;

    }

    switch(formatString.match(placeholderRegex)[1]) {
      case 'amount':
        value = formatWithDelimiters(cents, 2);
        break;
      case 'amount_no_decimals':
        value = formatWithDelimiters(cents, 0);
        break;
      case 'amount_with_comma_separator':
        value = formatWithDelimiters(cents, 1, '.', ',');
        break;
      case 'amount_no_decimals_with_comma_separator':
        value = formatWithDelimiters(cents, 0, '.', ',');
        break;
    }
    return formatString.replace(placeholderRegex, value);
}

  return {formatMoney: formatMoney};

})();

/**
 *
 * From Shopifys "Slate" theme.
 * With a few modifications here and there.
 *
 */
concrete.Sections = function Sections() {
  this.constructors = {};
  this.instances = [];

  $(document)
  .on('shopify:section:load', this._onSectionLoad.bind(this))
  .on('shopify:section:unload', this._onSectionUnload.bind(this))
  .on('shopify:section:select', this._onSelect.bind(this))
  .on('shopify:section:deselect', this._onDeselect.bind(this))
  .on('shopify:section:reorder', this._onSectionReorder.bind(this))
  .on('shopify:block:select', this._onBlockSelect.bind(this))
  .on('shopify:block:deslect', this._onBlockDeselect.bind(this));
};

concrete.Sections.prototype = _.assign({}, concrete.Sections.prototype, {
  _createInstance: function(container, constructor) {
    var $container = $(container);
    var id = $container.attr('data-section-id');
    var type = $container.attr('data-section-type');

    constructor = constructor || this.constructors[type];

    if (typeof(constructor) === 'undefined') {
      return;
    }

    var instance = _.assign(new constructor(container), {
      id: id,
      type: type,
      container: container
    });

    this.instances.push(instance);
  },

  _onSectionLoad: function(evt) {
    var container = $('[data-section-type]', evt.target)[0];
    if (container) {
      this._createInstance(container);
    }
  },

  _onSectionUnload: function(evt) {
    this.instances = this.instances.filter( function(instance) {
      var isEventInstance = (instance.id === evt.detail.sectionId);
      if (isEventInstance) {
        if (typeof(instance.onUnload) === 'function') {
          instance.onUnload(evt);
        }
      }

      return !isEventInstance;
    });
  },

  _onSelect: function(evt) {
    var instance = this.instances.filter(function(instance) {
      return instance.id === evt.detail.sectionId;
    })[0];

    if (typeof(instance) !== 'undefined' && typeof(instance.onSelect) === 'function') {
      instance.onSelect(evt);
    }
  },

  _onDeselect: function(evt) {
    var instance = this.instances.filter(function(instance) {
      return instance.id === evt.detail.sectionId;
    })[0];

    if (typeof(instance) !== 'undefined' && typeof(instance.onDeselect) === 'function') {
      instance.onDeselect(evt);
    }
  },

_onSectionReorder: function(evt) {
    var instance = slate.utils.findInstance(this.instances, 'id', evt.detail.sectionId);

    if (instance && typeof instance.onSectionReorder === 'function') {
      instance.onSectionReorder(evt);
    }
  },

  _onBlockSelect: function(evt) {
    var instance = this.instances.filter(function(instance) {
      return instance.id === evt.detail.sectionId;
    });

    if (typeof(instance) !== 'undefined' && typeof(instance.onBlockSelect) === 'function') {
      instance.onBlockSelect(evt);
    }
  },

  _onBlockDeselect: function(evt) {
    var instance = this.instances.filter(function(instance) {
      return instance.id === evt.detail.sectionId;
    })[0];

    if (typeof(instance) !== 'undefined' && typeof(instance.onBlockDeselect) === 'function') {
      instance.onBlockDeselect(evt);
    }
  },
  register: function(type, constructor) {
    this.constructors[type] = constructor;

    $('[data-section-type=' + type + ']').each(function(idx, container) {
      this._createInstance(container, constructor);
    }.bind(this));
  }
});

// Javascript image helpers
concrete.Images = (function() {

  function preload(images, size) {
    if (typeof images === 'string') {
      images = [images];
    }
    for (var i = 0; i <= images.length-1; i++) {
      this.imageLoad(this.getImageUrl(images[i], size));
    }
  }

  function imageLoad(url) {
    new Image().src = url;
  }

  function getImageUrl(src, size) {
    if (size === null) {
      return src;
    }

    if (size === 'master') {
      return concrete.Images.removeProtocol(src);
    }

    var match = src.match(/\.(jpg|jpeg|gif|png|tiff|tif|bmp|bitmap)(\?v=\d+)$/i);

    if (match !== null) {
      var prefix = src.split(match[0]);
      var suffix = match[0];

      return concrete.Images.removeProtocol(prefix[0] + "_" + size + suffix);
    }

    return null;

  }

  function imageSize(src) {
    var match = src.match(/.+_((?:pico|icon|thumb|small|compact|medium|large|grande)|\d{1,4}x\d{0,4}|x\d{1,4})[_\.@]/);

    if (match !== null) {
      return match[1];
    } else {
      return null;
    }
  }

  function switchImage(element, image, callback) {
    var oldSize = imageSize(element.src)
    var newSize = imageSize(image.src);
    var newImage = image.src;

    // If the iamge already has the size parameter remove it
    if (newSize !== null) {
      newImage = newImage.replace('_'+newSize, '')
    }

    var imageUrl = getImageUrl(newImage, oldSize);

    if (typeof callback === 'function') {
      callback(imageUrl, size, element);
    } else {
      element.src = imageUrl;
    }
  }

  function removeProtocol(url) {
    return url.replace(/http(s)?:/, '');
  }

  return {
    preload: preload,
    getImageUrl: getImageUrl,
    imageSize: imageSize,
    imageLoad: imageLoad,
    switchImage: switchImage,
    removeProtocol: removeProtocol,
  };

})();

concrete.Collection = (function() {

  function Collection(container) {
    var $container = this.$container = $(container);
    this.selectors = {
      sortBy: '[data-sort]',
      viewBy: '[data-view]'
    }

    $container.on('change', this.selectors.sortBy, this._onSortByChange.bind(this));
    $container.on('click', this.selectors.viewBy, this._onViewByChange.bind(this));
  }

  Collection.prototype = _.assignIn({}, Collection.prototype, {

    _getSortBy: function() {
      return $(this.selectors.sortBy+' option:selected').val();
    },

    _onSortByChange: function() {

      var sortBy = this._getSortBy();
      this.$container.trigger({
        type: 'sortByChange',
        sortBy: sortBy
      });

      concrete.urlParams.sort_by = this.currentSortBy = sortBy;
      location.search = jQuery.param(concrete.urlParams);
    },

    _onViewByChange: function(evt) {
      evt.preventDefault();
      var viewBy = evt.target.getAttribute('data-view');

      this.$container.trigger({
        type: 'viewByChange',
        sortBy: viewBy
      });

      concrete.urlParams.view = this.currentViewBy = viewBy;
      location.search = jQuery.param(concrete.urlParams);
    },

    onUnload: function() {
      this.$container.off();
    }

  });
  return Collection;
  // intialize self
})();
concrete.Variants = (function() {

  function Variants(options) {
    this.$container = options.$container;
    this.product = options.product;
    this.singleOptionSelector = options.singleOptionSelector;
    this.originalSelectorId = options.originalSelectorId;
    this.enableHistoryState = options.enableHistoryState;
    this.currentVariant = this._getVariantFromOptions();

    $(this.singleOptionSelector, this.$container).on('change', this._onSelectChange.bind(this));
  }

  Variants.prototype = _.assign({}, Variants.prototype, {

    _getCurrentOptions: function() {
      var currentOptions = _.map(jQuery(this.singleOptionSelector, this.$container), function(el) {
        var $element = $(el);
        var type = $element.attr('type');
        var currentOption = {};
        if (type === 'radio' || type === 'checkbox') {
          if ($element[0].checked) {
            currentOption.value = $element.val();
            currentOption.index = $element.attr('data-index');

            return currentOption;
          } else {
            return false;
          }
        } else {
          currentOption.value = $element.val();
          currentOption.index = $element.data('index');
          return currentOption;
        }
      });

      currentOptions = _.compact(currentOptions);
      return currentOptions;
    },

    _getVariantFromOptions: function() {
      var selectedValues = this._getCurrentOptions();
      var variants = this.product.variants;
      var found = variants.filter(function(variant) {
        return selectedValues.every(function(values) {
          return _.isEqual(variant[values.index], values.value);
        });
      });
      return found[0];
    },

    _onSelectChange: function() {
      var variant = this._getVariantFromOptions();
      this.$container.trigger({
        type: 'variantChange',
        variant: variant
      });

      if (!variant) {
        return;
      }

      this._updateMasterSelect(variant);
      this._updateImages(variant);
      this._updatePrice(variant);
      this._updateSKU(variant);
      this.currentVariant = variant;

      if (this.enableHistoryState) {
        this._updateHistoryState(variant);
      }
    },

    _updateImages: function(variant) {
      var variantImage = variant.featured_image || {};
      var currentVariantImage = this.currentVariant.featured_image || {};

      if (!variant.featured_image || variantImage.src === currentVariantImage.src) {
        return;
      }

      this.$container.trigger({
        type: 'variantImageChange',
        variant: variant
      });
    },

    _updatePrice: function(variant) {
      if (variant.price === this.currentVariant.price && variant.compare_at_price === this.currentVariant.compare_at_price) {
        return;
      }

      this.$container.trigger({
        type: 'variantPriceChange',
        variant: variant
      });
    },

    _updateSKU: function(variant) {
      if (variant.sku === this.currentVariant.sku) {
        return;
      }

      this.$container.trigger({
        type: 'variantSKUChange',
        variant: variant
      });
    },

    _updateHistoryState: function(variant) {
      if (!history.replaceState || !variant) {
        return;
      }

      // Push the variant attribute to the browser history and url
      concrete.pushNewUrl(concrete.replaceUrlParam(window.location.href, 'variant', variant.id))
    },

    _updateMasterSelect: function(variant) {
      $(this.originalSelectorId, this.$container).val(variant.id);
    }
  });

  return Variants;

})();

concrete.Product = (function() {

  function Product(container) {
    var $container = this.$container = $(container);
    //var sectionId = $container.attr('data-section-id');
    this.settings = {
      enableHistoryState: $container.data('enable-history-state') || false,
    };

    // Create our selectors
    this.selectors = {
      addToCart: '[data-add-to-cart]',
      addToCartText: '#AddToCartText',
      comparePrice: '#ComparePrice',
      originalPrice: '#ProductPrice',
      onSale: '#OnSale',
      featuredImage: '#ProductPhotoImg',
      featuredImageContainer: '#ProductPhoto',
      originalSelectorId: '#productSelect',
      singleOptionSelector: '.single-option-selector',
      variantId: '[name=id]',
    };
    // Find the product json
    if (!$('#ProductJson').html()) {
      return;
    }
    this.productSingleObject = JSON.parse(document.getElementById('ProductJson').innerHTML);
    this._stringOverrides();
    this._initVariants();
  }


  Product.prototype = _.assignIn({}, Product.prototype, {

    _stringOverrides: function() {
      concrete.productStrings = concrete.productStrings || {};
      _.extend(concrete.strings, concrete.productStrings);
    },

    _initVariants: function() {
      var options = {
        $container: this.$container,
        enableHistoryState: this.settings.enableHistoryState,
        singleOptionSelector: this.selectors.singleOptionSelector,
        product: this.productSingleObject,
      };

      this.variants = new concrete.Variants(options);
      this.$container.on('variantChange', this._updateAddToCart.bind(this));
      this.$container.on('variantChange', this._updateVariantId.bind(this));
      this.$container.on('variantChange', this._updatePrices.bind(this));
    },

    _updateAddToCart: function(evt) {
      var variant = evt.variant;
      $(this.selectors.productPrices).removeClass('hidden');

      if (variant) {
        if (variant.available) {
          $(this.selectors.addToCart).prop('disabled', false);
          $(this.selectors.addToCartText).text(concrete.strings.addToCart);
        } else {
          $(this.selectors.addToCart).prop('disabled', true);
          $(this.selectors.addToCartText).text(concrete.strings.soldOut);
        }
      } else {
        $(this.selectors.addToCart).prop('disabled', true);
        $(this.selectors.addToCartText).text(concrete.strings.unavailable);
        $(this.selectors.productPrices).addClass('hidden');
      }
    },

    _updatePrices: function(evt) {
      var variant = evt.variant;
      $(this.selectors.originalPrice).html(concrete.Currency.formatMoney(variant.price));
      if (variant.price < variant.compare_at_price) {
        $(this.selectors.onSale).removeClass('hidden')
        $(this.selectors.comparePrice).html(concrete.Currency.formatMoney(variant.compare_at_price, concrete.moneyFormat))
      } else {
        $(this.selectors.onSale).addClass('hidden');
      }
    },

    _updateVariantId: function(evt) {
      var variant = evt.variant;
      if (variant)
        $(this.selectors.variantId).val(variant.id);
    },

    onUnload: function() {
      this.$container.off();
    }

  });

  return Product;
  // intialize self
})();

/**
 *  This is an example of a new sections javascript. When you call: sections.register('empty-section', EmptySection)
 * the function EmptySection() will fire with a container set to $('[data-section-type=empty-section]')
 * This is also fired when the shopify:section:onload event fires.
 * You can edit the individual events to modify what happens in the theme editor yourself; but be aware that EmptySection() is also fired on page load on the live site.
 * Any functions unique to your section should do inside the EmptySection.prototype object and the function name should be preceeded with an _.
 * Format: _myFunction: function(arguments) { //Function code }.
 * Settings can be passed to this.settings by adding data attributes to your sections parent div and selecting them inside this.settings.
 **/
concrete.EmptySection = (function() {
  function EmptySection(container) {
    var $container = $(container);
    var sectionId = $container.data('section-id');
    this.settings = {};
    this.selectors = {};
  }

  EmptySection.prototype = _.assignIn({}, EmptySection.prototype, {
    onSectionUnload: function(evt) { },
    onSectionSelect: function(evt) { },
    onSectionDeselect: function(evt) { },
    onBlockSelect: function(evt) { },
    onBlockDeselect: function(evt) { },
  });

  return EmptySection;
})();



// Initialize on document ready
$(document).ready(function() {
  // Register sections js
  var sections = new concrete.Sections();
  sections.register('product', concrete.Product);
  sections.register('collection', concrete.Collection);

  // Menu items logic
  $('.dropdown-item').each(function() {
    if ($(this).hasClass('active')) {
      $(this).closest('.secondary-item, .mobile-item').removeClass('inactive').addClass('active');
    }
  });
  $('.secondary-item, .mobile-item').each(function() {
    if ($(this).hasClass('active')) {
      var secondaryItemTitle = $(this).parent().data('main-title');
      $(this).parent().removeClass('inactive').addClass('active');
      $('.main-menu .item[data-main-title="'+secondaryItemTitle+'"]').removeClass('inactive').addClass('active');
    }
  });

  // Cart Math Logic
  function changeCartQty() {
    // Header
    // var header_cart_qty = $('.menu.row-1 .cart-qty').data('cart-item-count');
    // var header_cart_result = header_cart_qty; // was / 2
    // $('.menu.row-1 .cart-qty').prepend('('+header_cart_result+')');

    // Cart Page
    $('.length-price .quantity').each(function() {
      var cart_page_qty = $(this).data('value');
      var cart_page_result = cart_page_qty / 1;
      if (cart_page_result <= 1) {
        $(this).prepend('Length: '+cart_page_result+' yard');
      } else {
        $(this).prepend('Length: '+cart_page_result+' yards');
      }
    });

    $('.cart__qty-input').each(function(){
      var currentQuantity = $(this).val();
      $(this).next().val(currentQuantity/1);
    });

    $('.dummy-quantity').change(function(){
      var currentQuantity = $(this).val();
      $(this).val(Math.round(currentQuantity*1)/1);
      $(this).prev().val(currentQuantity*1);
    });
  }
  changeCartQty();

  if( /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent) ) {
    $('.item-dropdown .secondary-item-link').on('click', function(e) {
      e.preventDefault();
    });
  }

  // Mobile Search Actions
  $('#mb-actions .search').on('click', function() {
  	$('.search-bar').slideToggle();
  });

  $('.mb-search-close').on('click', function() {
  	$('.search-bar').slideToggle();
  });

  $('.mb-search-action').on('click', function() {
  	$('.search-bar').find('form').submit();
  });

  // Mobile Item Dropdown
  $('.mb-item-dropdown .mb-item-link').on('click', function(e) {
    e.preventDefault();
    $(this).next('.dropdown-window').slideToggle();
  });
  $('.mb-item-dropdown .mb-item-link').on('click', function(e) {
    e.preventDefault();
    $(this).next('.dropdown-window-ds').slideToggle();
  });


  // Init Slick Slider for sections/hero-slider.liquid
  $('#hero-slider').slick({
    autoplay: true,
    autoplaySpeed: 5000,
    arrows: false,
    prevArrow: '<a class="hero-prev"><i class="fa fa-angle-left" aria-hidden="true"></i></a>',
    nextArrow: '<a class="hero-next"><i class="fa fa-angle-right" aria-hidden="true"></i></a>',
    dots: true,
    fade: true,
    appendDots: '.nav-dots',
    customPaging: function(slider, i) {
      var thumb = $(slider.$slides[i]).data();
      return '<a><i class="fa fa-circle-thin" data-index="'+i+'"></i></a>'
    },
    useCSS: false
  });

  // Init Slick Slider for sections/brand-slider.liquid
  $('#brand-slider').slick({
    slidesToShow: 4,
    slidesToScroll: 1,
    autoplay: true,
    autoplaySpeed: 5000,
    arrows: true,
    prevArrow: '<a class="brand-prev"><i class="fa fa-angle-left" aria-hidden="true"></i></a>',
    nextArrow: '<a class="brand-next"><i class="fa fa-angle-right" aria-hidden="true"></i></a>',
    dots: false,
    useCSS: false,
    responsive: [
      {
        breakpoint: 600,
        settings: {
          slidesToShow: 1,
          slidesToScroll: 1,
          arrows: true,
          prevArrow: '<a class="brand-prev"><i class="fa fa-angle-left" aria-hidden="true"></i></a>',
          nextArrow: '<a class="brand-next"><i class="fa fa-angle-right" aria-hidden="true"></i></a>',
          dots: false,
          useCSS: false
        }
      },
      {
        breakpoint: 850,
        settings: {
          slidesToShow: 2,
          slidesToScroll: 1,
          arrows: true,
          prevArrow: '<a class="brand-prev"><i class="fa fa-angle-left" aria-hidden="true"></i></a>',
          nextArrow: '<a class="brand-next"><i class="fa fa-angle-right" aria-hidden="true"></i></a>',
          draggable: true,
          dots: false,
          useCSS: false
        }
      }
    ]
  }); // $('#brand-slider').slick();

  // Product Page Slick Slider
  // $('#ProductImages').slick({
  //   slidesToShow: 1,
  //   slidesToScroll: 1,
  //   arrows: false,
  //   fade: true,
  //   asNavFor: '#ProductThumbs',
  //   useCSS: false
  // });
  //
  // $('#ProductThumbs').slick({
  //   slidesToShow: 3,
  //   slidesToScroll: 1,
  //   asNavFor: '#ProductImages',
  //   dots: false,
  //   arrows: true,
  //   prevArrow: '<a class="img-prev"><i class="fa fa-angle-left" aria-hidden="true"></i></a>',
  //   nextArrow: '<a class="img-next"><i class="fa fa-angle-right" aria-hidden="true"></i></a>',
  //   focusOnSelect: true,
  //   useCSS: false
  // });

  // Show/Hide Mobile Menu
  $('.hamburguer').on('click', function() {
    $('.mobile-menu').slideToggle();
  });

  // Truncate Paragraphs
  var charLimit = 100;

  function truncate(el) {
    var text = el.text();
    el.attr("data-originalText", text);
    el.text(text.substring(0, charLimit) + "...");
    el.addClass('truncated');
  }

  function reveal(el) {
    el.text(el.attr("data-originalText"));
  }

  truncate($('.truncate'));

  $('.description').on('click', function() {
    if ($('.truncate').hasClass('truncated')) {
      $(this).find('i').removeClass('fa-chevron-down').addClass('fa-chevron-up')
      $('.truncate').removeClass('truncated');
      reveal($('.truncate'));
    } else {
      $('.truncate').addClass('truncated');
      $(this).find('i').removeClass('fa-chevron-up').addClass('fa-chevron-down')
      truncate($('.truncate'));
    }
  });

  // TODO: Simplify accordions

  // Accordion for Sidebar
  $('.accordion .main').on('click', function () {
    $(this).toggleClass('pane-open');
    $(this).find('.icon').find('i').toggleClass('fa-chevron-down fa-chevron-up');
    $(this).next('.pane').slideToggle();
  });

  // Accordion for FAQ & Design Tools
  $('.accordion .title').on('click', function() {
    $(this).next('.pane').slideToggle();
    $(this).find('i').toggleClass('fa-chevron-down fa-chevron-up');
  });

  // View by filter
  $('#view-per-page').on('change', function() {
    var optVal = $(this).val();
    $('.view-per-page-picker[data-view="'+optVal+'"').trigger('click');
  });

  // Universal Tab Function
  $('.tab-item').on('click', function() {
    var index = $(this).index(),
        tabgroup = $(this).parents('.tab-navigation').data('tabgroup'),
        panelsContext = ($('.tab-panels[data-tabgroup="'+tabgroup+'"]')),
        tabItemsContext = ($('.tab-navigation[data-tabgroup="'+tabgroup+'"]'));

    $('.tab-item', tabItemsContext).removeClass('active');
    $(this).addClass('active');
    $(" > .tab-panel", panelsContext).removeClass("active");
    $(".tab-panel:eq(" + index + ")", panelsContext).addClass("active");
  });

  var designerBrands = $('.designer-brands');

  if (designerBrands.length > 0) {
    function getAnchor() {
      return (document.URL.split('#').length > 1) ? document.URL.split('#')[1] : null;
    }

    function triggerEvent(el, type) {
      if ('createEvent' in document) {
        // modern browsers, IE9+
        var e = document.createEvent('HTMLEvents');
        e.initEvent(type, false, true);
        el.dispatchEvent(e);
      } else {
        // IE 8
        var e = document.createEventObject();
        e.eventType = type;
        el.fireEvent('on' + e.eventType, e);
      }
    }

    var url = window.location.href;
    if (getAnchor(url) != null) {
      var anchorVal = getAnchor(url);
      var elem = document.querySelector('.tab-item[href="#' + anchorVal + '"]');
      console.log(elem);
      triggerEvent(elem, 'click');
    }
  }

  // Price Quote Form Clone
  $('#add-more-action').on('click', function() {
    var clone = $(this).closest('#contact_form').find('.formClone:first').clone();
    clone.insertAfter($('.formClone:last'));
    if ($('.formClone').length > 1) {
      $('.remove').show();
    }
    $('.remove').on('click', function() {
      if ($('.formClone').length > 1) {
        $(this).parent().remove();
      } else {
        $(this).hide();
      }
    });
  });

  // Notes: I started using Velocity JS for all animations from here on out.

  // Blocks for Window Treatment, Bedding, and Pillows & More
  $('.window-categories .block').on('click touch', function() {
    var category = $(this).data('category');
    var duration = { duration: 500 };
    var showOptions = {
      opacity: 1,
      visibility: "visible",
      top: '-30%',
      left: 0,
      right: 0,
      bottom: 0
     };
    var paneGrab = $('.pane[data-category="'+category+'"]');
    paneGrab.velocity(showOptions, duration);
  });

  $('.window-categories .close-action').on('click touch', function() {
    var parent = $(this).parents('.pane');
    var duration = { duration: 500 };
    var hideOptions = {
      opacity: 0,
      visibility: "hidden",
      top: "50%",
      left: "50%",
      right: "50%",
      bottom: "50%"
    };
    parent.velocity(hideOptions, duration);
  });

});
